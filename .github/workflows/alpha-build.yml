name: "alpha-build"

on:
  push:
    branches:
      - dev

jobs:
  publish-release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"

    runs-on: ${{ matrix.platform }}
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: Import Apple Developer Certificate
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: Debug List all identities
        run: |
          security find-identity -v -p codesigning build.keychain
      - name: Verify Certificate
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "TM9657 GmbH")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      # - name: Install Protoc
      #   uses: arduino/setup-protoc@v3
      #   with:
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}

      # - name: install bun
      #   run: "npm install -g bun"

      # - name: install Rust stable
      #   uses: dtolnay/rust-toolchain@stable
      #   with:
      #     # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
      #     targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      # - name: install frontend dependencies
      #   run: bun install # change this to npm, pnpm or bun depending on which one you use.
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: check llamafile
      #   run: |
      #     if [ ! -f "./src-tauri/bin/llamafiler" ]; then
      #       echo "Llamafile not downloaded successfully"
      #       exit 1
      #     fi

      # - uses: tauri-apps/tauri-action@v0
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
      #     APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      #     APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
      #   with:
      #     tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
      #     releaseName: "App v__VERSION__"
      #     releaseBody: "See the assets to download this version and install."
      #     releaseDraft: true
      #     prerelease: false
      #     tauriScript: "bun tauri"
      #     args: ${{ matrix.args }}