# This is a basic workflow to help you get started with Actions

name: OpenCV Build

on:
  push:
    branches:
      - dev
  workflow_dispatch:

jobs:
  ubuntu-build:
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt update
          sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install dependencies
        run: sudo apt update && sudo apt install build-essential cmake wget unzip

      - name: Build OpenCV static lib
        run: |
          wget -O opencv.zip https://github.com/opencv/opencv/archive/refs/tags/4.11.0.zip
          wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/refs/tags/4.11.0.zip
          unzip opencv.zip && rm opencv.zip
          unzip opencv_contrib.zip && rm opencv_contrib.zip
          mkdir -p build && cd build

          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            CMAKE_ARGS="-DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_SYSTEM_PROCESSOR=aarch64"
          else
            CMAKE_ARGS=""
          fi

          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=NO -DCMAKE_INSTALL_PREFIX=/opt/opencv \
                -DBUILD_DOCS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF \
                -DWITH_PNG=OFF -DWITH_JPEG=OFF -DWITH_TIFF=OFF -DWITH_WEBP=OFF \
                -DWITH_OPENJPEG=OFF -DWITH_JASPER=OFF -DWITH_OPENEXR=OFF -DWITH_V4L=OFF \
                -DBUILD_opencv_java=OFF -DBUILD_opencv_python=OFF \
                -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-4.11.0/modules \
                $CMAKE_ARGS ../opencv-4.11.0
          cmake --build . --target install --config Release --parallel 8
          cmake --install . --prefix /opt/opencv

      - name: Package artifacts
        run: |
          tar -czf opencv-${{ matrix.target }}.tar.gz -C /opt opencv

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: opencv-${{ matrix.target }}
          path: opencv-${{ matrix.target }}.tar.gz
          retention-days: 30

  macos-build:
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build OpenCV static lib
        run: |
          wget -O opencv.zip https://github.com/opencv/opencv/archive/refs/tags/4.11.0.zip
          wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/refs/tags/4.11.0.zip
          unzip opencv.zip && rm opencv.zip
          unzip opencv_contrib.zip && rm opencv_contrib.zip
          mkdir -p build && cd build

          if [ "${{ matrix.target }}" = "aarch64-apple-darwin" ]; then
            CMAKE_ARGS="-DCMAKE_OSX_ARCHITECTURES=arm64"
          else
            CMAKE_ARGS="-DCMAKE_OSX_ARCHITECTURES=x86_64"
          fi

          sudo cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=NO -DCMAKE_INSTALL_PREFIX=/usr/local \
                     -DBUILD_DOCS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF \
                     -DWITH_PNG=OFF -DWITH_JPEG=OFF -DWITH_TIFF=OFF -DWITH_WEBP=OFF \
                     -DWITH_OPENJPEG=OFF -DWITH_JASPER=OFF -DWITH_OPENEXR=OFF -DWITH_V4L=OFF \
                     -DBUILD_opencv_java=OFF -DBUILD_opencv_python=OFF \
                     -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-4.11.0/modules \
                     $CMAKE_ARGS ../opencv-4.11.0
          sudo cmake --build . --target install --config Release --parallel 8
          sudo cmake --install . --prefix /usr/local

      - name: Package artifacts
        run: |
          tar -czf opencv-${{ matrix.target }}.tar.gz -C /usr/local include lib

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: opencv-${{ matrix.target }}
          path: opencv-${{ matrix.target }}.tar.gz
          retention-days: 30

  windows-build:
    strategy:
      matrix:
        target: [x86_64-pc-windows-msvc, aarch64-pc-windows-msvc]
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: choco install cmake wget

      - name: Build OpenCV static lib
        run: |
          wget -O opencv.zip https://github.com/opencv/opencv/archive/refs/tags/4.11.0.zip
          wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/refs/tags/4.11.0.zip
          Expand-Archive opencv.zip . && Remove-Item opencv.zip
          Expand-Archive opencv_contrib.zip . && Remove-Item opencv_contrib.zip
          mkdir build && cd build

          if ("${{ matrix.target }}" -eq "aarch64-pc-windows-msvc") {
            $CMAKE_ARGS = "-A ARM64"
            $INSTALL_PATH = "D:/opencv-arm64"
          } else {
            $CMAKE_ARGS = "-A x64"
            $INSTALL_PATH = "D:/opencv"
          }

          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=NO -DCMAKE_INSTALL_PREFIX="$INSTALL_PATH" `
                -DBUILD_DOCS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF `
                -DWITH_PNG=OFF -DWITH_JPEG=OFF -DWITH_TIFF=OFF -DWITH_WEBP=OFF `
                -DWITH_OPENJPEG=OFF -DWITH_JASPER=OFF -DWITH_OPENEXR=OFF -DWITH_V4L=OFF `
                -DBUILD_opencv_java=OFF -DBUILD_opencv_python=OFF `
                -DOPENCV_EXTRA_MODULES_PATH="../opencv_contrib-4.11.0/modules" `
                $CMAKE_ARGS ../opencv-4.11.0
          cmake --build . --target install --config Release --parallel 8
          cmake --install . --prefix "$INSTALL_PATH"

      - name: Package artifacts
        run: |
          if ("${{ matrix.target }}" -eq "aarch64-pc-windows-msvc") {
            Compress-Archive -Path D:/opencv-arm64/* -DestinationPath opencv-${{ matrix.target }}.zip
          } else {
            Compress-Archive -Path D:/opencv/* -DestinationPath opencv-${{ matrix.target }}.zip
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: opencv-${{ matrix.target }}
          path: opencv-${{ matrix.target }}.zip
          retention-days: 30