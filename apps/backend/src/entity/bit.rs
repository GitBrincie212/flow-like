//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use super::sea_orm_active_enums::BitType;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "Bit")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    pub private: bool,
    #[sea_orm(column_name = "permissionAttributes")]
    pub permission_attributes: Option<Vec<String>>,
    pub r#type: BitType,
    #[sea_orm(column_type = "Text", nullable)]
    pub repository: Option<String>,
    #[sea_orm(column_name = "downloadLink", column_type = "Text", nullable)]
    pub download_link: Option<String>,
    #[sea_orm(column_name = "fileName", column_type = "Text", nullable)]
    pub file_name: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub hash: String,
    pub size: Option<i64>,
    #[sea_orm(column_type = "Text")]
    pub hub: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub icon: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub thumbnail: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub version: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub license: Option<String>,
    #[sea_orm(column_name = "dependencyTreeHash", column_type = "Text")]
    pub dependency_tree_hash: String,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTime,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::dependency::Entity")]
    Dependency,
    #[sea_orm(has_many = "super::meta::Entity")]
    Meta,
    #[sea_orm(has_one = "super::provider_proxy::Entity")]
    ProviderProxy,
    #[sea_orm(has_many = "super::swimlane_item::Entity")]
    SwimlaneItem,
}

impl Related<super::dependency::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Dependency.def()
    }
}

impl Related<super::meta::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Meta.def()
    }
}

impl Related<super::provider_proxy::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProviderProxy.def()
    }
}

impl Related<super::swimlane_item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SwimlaneItem.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
