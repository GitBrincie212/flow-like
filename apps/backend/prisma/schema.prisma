generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LandingPage {
  id String @id

  title String
  description String
  image String
  link String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SwimlaneType {
  PROJECT
  ARTICLE
  CHAT
  COURSE
  QUERY
}

enum SwimlaneSize {
  FULLSCREEN
  HALFSCREEN
  THIRDSCREEN
  THIRDSCREEN_MULTIROW
}

model Swimlane {
  id String @id

  title String?
  description String?

  type SwimlaneType
  size SwimlaneSize

  items SwimlaneItem[]

  // these are used to find items for the swimlane that are not fixed
  tags String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SwimlaneItem {
  id String @id

  swimlane Swimlane @relation(fields: [swimlaneId], references: [id], onDelete: Cascade)
  swimlaneId String

  order Int

  // This could be a link to a different page / article / ... depending on the Type of Swimlane
  content Json?

  bit Bit? @relation(fields: [bitId], references: [id], onDelete: Cascade)
  bitId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id String @id

  path String?
  name String
  thumbnail String?
  icon String?
  description String?
  interests String[]
  tags String[]

  bitIds String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Template {
  id String @id

  meta Meta[]
  media String[]

  comments Comment[]
  changelog String?

  feedback Feedback[]

  ratingSum   Int   @default(0)
  ratingCount Int   @default(0)

  app App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  version String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Node {
  id String @id

  name String
  description String?
  category String
  icon String?

  bitId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum UserTier {
  FREE
  PREMIUM
  PRO
  ENTERPRISE
}

model User {
  id          String  @id
  email       String  @unique
  username    String  @unique
  name        String
  description String?
  avatarUrl   String?

  themes Json?
  additionalInformation Json?

  permission BigInt
  acceptedTermsVersion String?
  tutorialCompleted Boolean @default(false)

  personalAccessToken PAT[]
  memberships Membership[]
  comments    Comment[]
  queue       JoinQueue[]
  logs       ProviderInvocation[]
  feedback    Feedback[]
  assignedPublicationRequests PublicationRequest[]
  publicationLogs PublicationLog[]
  invitations Invitations[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invitations {
  id String @id

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  app   App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PAT {
  id String @id

  name String
  key String @unique
  permissions BigInt @default(0)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  validUntil DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum Status {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum Visibility {
  PUBLIC
  PUBLIC_REQUEST_TO_JOIN
  PRIVATE
  PROTOTYPE
}

model JoinQueue {
  id String @id

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  app   App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  comment String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, appId])
}

model InviteLink {
  id String @id

  token String @unique
  app   App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  countJoined Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model App {
  id String @id

  status     Status
  visibility Visibility

  meta Meta[]

  templates Template[]
  media String[]
  queue JoinQueue[]
  members Membership[]
  comments Comment[]
  changelog String?

  courses CourseConnection[]
  inviteLinks InviteLink[]
  invitations Invitations[]

  feedback Feedback[]
  publicationRequests PublicationRequest[]

  defaultRole Role @relation("defaultForApp", fields: [defaultRoleId], references: [id])
  defaultRoleId String @unique
  ownerRole Role @relation("ownerForApp", fields: [ownerRoleId], references: [id])
  ownerRoleId String @unique
  roles Role[]
  files File[]

  ratingSum   Int   @default(0)
  ratingCount Int   @default(0)

  totalSize BigInt @default(0)

  price Int @default(0)
  version String?

  technicalUsers TechnicalUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
  @@index([status])
}

model File {
  path String @id
  eTag String

  size BigInt

  app App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TechnicalUser {
  id String @id

  name String
  description String?
  key String @unique

  role Role? @relation(fields: [roleId], references: [id], onDelete: SetNull)
  roleId String?

  app   App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  validUntil DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([appId])
}

model Feedback {
  id String @id

  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  app   App? @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String?

  template Template? @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String?

  context Json?
  text String
  rating Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([appId])
  @@index([createdAt])
  @@index([userId])
}

model CourseConnection {
  id String @id

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  app App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([appId])
}

model Course {
  id String @id

  language String
  meta Meta[]

  connections CourseConnection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([language])
}

model Comment {
  id String @id

  text String
  rating Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  app   App? @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String?

  template Template? @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, appId])
  @@index([appId])
  @@index([userId])
}

model Membership {
  id String @id

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  app   App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  favorite Boolean @default(false)
  favoritePosition Int?
  pinned   Boolean @default(false)
  pinnedPosition Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  joinedVia String?

  @@unique([userId, appId])
  @@index([appId, roleId])
}

model Role {
  id String @id

  name        String
  description String?

  attributes  String[]
  permissions BigInt

  memberships Membership[]
  technicalUsers TechnicalUser[]

  app App? @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String?

  defaultForApp App? @relation("defaultForApp")
  ownerForApp App? @relation("ownerForApp")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BitType {
  LLM
  VLM
  EMBEDDING
  IMAGE_EMBEDDING
  FILE
  MEDIA
  TEMPLATE
  TOKENIZER
  TOKENIZER_CONFIG
  SPECIAL_TOKENS_MAP
  CONFIG
  PREPROCESSOR_CONFIG
  PROJECTION
  PROJECT
  BOARD
  OTHER
}

model Bit {
  id String @id

  private Boolean @default(true)
  permissionAttributes String[]

  type BitType
  meta Meta[]
  repository String?
  downloadLink String?
  fileName String?
  hash String

  size BigInt?
  hub String

  icon String?
  thumbnail String?

  version String?
  license String?

  dependencies Dependency[]
  dependencyTreeHash String

  providerProxy ProviderProxy?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  featuredSwimlane SwimlaneItem[]

  @@index([type])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([private])
  @@index([hash])
  @@index([hub])
}

model Dependency {
  id String @id

  bit   Bit @relation(fields: [bitId], references: [id], onDelete: Cascade)
  bitId String

  dependencyId String
  hub String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bitId])
}

model Meta {
  id String @id

  lang String

  name String
  description String?
  longDescription String?
  tags String[]

  app  App? @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String?

  bit Bit? @relation(fields: [bitId], references: [id], onDelete: Cascade)
  bitId String?

  course Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String?

  template Template? @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([appId])
  @@index([appId, lang])
  @@index([bitId, lang])
  @@index([courseId, lang])
  @@index([templateId, lang])
  @@index([lang])
}

enum LLMProvider {
  HuggingFace
  OpenAI
  Anthropic
  AzureOpenAI
  Google
  IBM
  X
  Bedrock
  Deepseek
}

model ProviderProxy {
  id String @id

  provider LLMProvider
  modelId String @unique
  version String?
  endpoint String?
  token String?

  logs ProviderInvocation[]

  bit Bit @relation(fields: [bitId], references: [id], onDelete: Cascade)
  bitId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProviderInvocation {
  id String @id

  proxy ProviderProxy @relation(fields: [proxyId], references: [id], onDelete: Cascade)
  proxyId String

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  inputToken String
  outputToken String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PublicationRequestStatus {
  PENDING
  ON_HOLD
  ACCEPTED
  REJECTED
}

model PublicationRequest {
  id String @id

  targetVisibility Visibility

  approver User? @relation(fields: [approverId], references: [id], onDelete: SetNull)
  approverId String?

  app App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  status PublicationRequestStatus

  logs PublicationLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([appId])
  @@index([approverId])
}

model PublicationLog {
  id String @id

  request PublicationRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId String

  author User? @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String?

  message String?
  visibility Visibility?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([requestId])
}


