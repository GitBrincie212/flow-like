---
/* src/pages/download.astro */
import "@tm9657/flow-like-ui/global.css";
import "../styles/Blog.css";
import BlogLayout from "../layouts/Blog-Layout.astro";
import {
  LuDownload,
  LuInfo,
  LuCpu,
  LuMonitor,
  LuExternalLink,
  LuShieldCheck,
  LuCheck,
  LuLink,
} from "react-icons/lu";

export const prerender = true;

const title = "Download Flow-Like";
const description =
  "Get the latest Flow-Like builds for macOS, Windows, and Linux. We recommend the right binary for your device.";
const site = Astro.site ?? import.meta.env.SITE;
const canonical = site ? new URL(Astro.url.pathname, site).toString() : "";

const ownerRepo = "TM9657/flow-like";
const listUrl = `https://api.github.com/repos/${ownerRepo}/releases`;

// --- server-side fetch that also works when only prereleases exist -----------
let release: any = null;
try {
  const headers: Record<string, string> = {
    Accept: "application/vnd.github+json",
    "User-Agent": "flow-like.com",
  };
  const token =
    (import.meta as any).env?.GITHUB_TOKEN ||
    (import.meta as any).env?.PUBLIC_GITHUB_TOKEN;
  if (token) headers.Authorization = `Bearer ${token}`;

  const res = await fetch(`${listUrl}?per_page=5`, { headers });
  if (res.ok) {
    const releases = await res.json();
    const nonDraft = releases.filter((r: any) => !r.draft);
    release = nonDraft.find((r: any) => !r.prerelease) || nonDraft[0] || null;
  }
} catch {
  /* client will refetch if needed */
}

// simple “content” so BlogLayout renders
const Content = (() => null) as any;
const data = {
  title,
  description,
  date: new Date().toISOString(),
  tags: ["download"],
  cover: null,
};
---

<BlogLayout data={data} content={Content}>
  <!-- Decorative global background -->
  <div
    aria-hidden="true"
    class="pointer-events-none absolute inset-0 -z-10 overflow-hidden"
  >
    <!-- Soft grid -->
    <div
      class="absolute inset-0 opacity-[0.08] [mask-image:radial-gradient(60%_60%_at_50%_20%,black,transparent)] bg-[linear-gradient(to_right,color-mix(in_oklch,var(--foreground)_8%,transparent)_1px,transparent_1px),linear-gradient(to_bottom,color-mix(in_oklch,var(--foreground)_8%,transparent)_1px,transparent_1px)] bg-[size:32px_32px]"
    />

  </div>

  <section id="download" class="relative mx-auto max-w-7xl px-4 lg:px-8">
    <!-- Hero -->
    <header class="mb-10 md:mb-14 text-center">
      <div class="inline-flex items-center gap-2 rounded-full border border-primary/20 bg-primary/10 px-3 py-1.5 text-xs font-medium text-primary mb-4 backdrop-blur">
        <div class="h-2 w-2 animate-pulse rounded-full bg-primary" />
        Official builds
      </div>
      <h1
        class="text-balance bg-gradient-to-b from-foreground to-foreground/70 bg-clip-text text-4xl font-bold tracking-tight text-transparent md:text-5xl mt-3!"
      >
        {title}
      </h1>
      <p class="mx-auto mt-3 max-w-2xl text-pretty text-base text-muted-foreground md:text-lg">
        {description}
      </p>
      <link rel="canonical" href={canonical} />
    </header>

    <!-- Recommendation card -->
    <div
      class="rounded-2xl border bg-card/60 p-5 sm:p-7 shadow-[0_8px_40px_-20px_color-mix(in_oklch,var(--primary)_35%,transparent)] backdrop-blur-sm"
    >
      <div
        class="flex flex-col gap-5 md:flex-row md:items-center md:justify-between"
      >
        <!-- Left: meta + badges -->
        <div class="space-y-3">
          <div
            class="inline-flex items-center gap-2 text-sm text-muted-foreground"
          >
            <LuInfo />
            <span id="release-meta">
              {release
                ? `Latest: ${release.tag_name ?? release.name ?? "—"} · ${new Date(
                    release.published_at ??
                      release.created_at ??
                      Date.now()
                  ).toDateString()}${
                    release.prerelease ? " (pre-release)" : ""
                  }`
                : "Fetching latest release…"}
            </span>
          </div>

          <div class="flex flex-wrap gap-2 text-sm">
            <span
              class="inline-flex items-center gap-2 rounded-full border border-foreground/10 bg-foreground/[.03] px-3 py-1.5"
            >
              <LuMonitor />
              <span id="detected-os">Detecting OS…</span>
            </span>
            <span
              class="inline-flex items-center gap-2 rounded-full border border-foreground/10 bg-foreground/[.03] px-3 py-1.5"
            >
              <LuCpu />
              <span id="detected-arch">Detecting CPU…</span>
            </span>
            <span
              class="inline-flex items-center gap-2 rounded-full border border-primary/30 bg-primary/10 px-3 py-1.5 text-primary"
            >
              <LuShieldCheck />
              <span>Recommended for your device</span>
            </span>
          </div>
        </div>

        <!-- Right: Primary CTA -->
        <div class="flex items-center gap-3">
          <a
            id="download-primary"
            href={`https://github.com/${ownerRepo}/releases`}
            target="_blank"
            rel="noopener noreferrer"
            class="group inline-flex items-center justify-center gap-2 rounded-xl bg-primary px-5 py-2.5 text-sm font-semibold text-primary-foreground shadow-sm transition hover:brightness-110 active:scale-[.99]"
          >
            <LuDownload className="transition group-hover:translate-y-[1px]" />
            <span>Download</span>
          </a>
        </div>
      </div>

      <!-- Controls -->
      <div
        class="mt-5 grid gap-3 sm:grid-cols-3 md:gap-4"
        role="region"
        aria-label="Download preferences"
      >
        <label class="flex flex-col gap-2">
          <span class="text-sm text-muted-foreground">Operating system</span>
          <select
            id="os-select"
            class="w-full rounded-lg border bg-background/70 px-3 py-2 backdrop-blur focus:outline-none focus:ring-2 focus:ring-primary/30"
          >
            <option value="auto">Auto-detect</option>
            <option value="macos">macOS</option>
            <option value="windows">Windows</option>
            <option value="linux">Linux</option>
          </select>
        </label>
        <label class="flex flex-col gap-2">
          <span class="text-sm text-muted-foreground">CPU architecture</span>
          <select
            id="arch-select"
            class="w-full rounded-lg border bg-background/70 px-3 py-2 backdrop-blur focus:outline-none focus:ring-2 focus:ring-primary/30"
          >
            <option value="auto">Auto-detect</option>
            <option value="arm64">ARM64</option>
            <option value="x64">x64</option>
          </select>
        </label>
        <label class="flex flex-col gap-2">
          <span class="text-sm text-muted-foreground">Package preference</span>
          <select
            id="pkg-select"
            class="w-full rounded-lg border bg-background/70 px-3 py-2 backdrop-blur focus:outline-none focus:ring-2 focus:ring-primary/30"
          >
            <option value="auto">Auto</option>
            <option value="dmg">macOS .dmg</option>
            <option value="zip">.zip</option>
            <option value="msi">Windows .msi</option>
            <option value="exe">Windows .exe</option>
            <option value="appimage">Linux AppImage</option>
            <option value="deb">Linux .deb</option>
            <option value="rpm">Linux .rpm</option>
            <option value="tar.gz">Linux .tar.gz</option>
          </select>
        </label>
      </div>

      <p class="mt-3 text-xs text-muted-foreground">
        Linux tip: AppImage works on most distros; prefer <code>.deb</code> for
        Debian/Ubuntu, <code>.rpm</code> for Fedora/RHEL.
      </p>
    </div>

    <!-- All downloads -->
    <div class="mt-12">
      <div class="mb-4 flex items-center justify-between">
        <h2 class="text-lg font-semibold tracking-tight">All downloads</h2>
        <a
          href={`https://github.com/${ownerRepo}/releases`}
          class="inline-flex items-center gap-2 rounded-lg border px-3 py-1.5 text-sm transition hover:bg-accent"
          rel="noopener"
          target="_blank"
        >
          <LuExternalLink />
          Open Releases on GitHub
        </a>
      </div>

      <!-- Asset list -->
      <div id="asset-list" class="grid gap-4">
        <!-- Skeleton (replaced by JS) -->
        <div
          class="grid gap-3 sm:grid-cols-2 lg:grid-cols-3"
          id="asset-skeleton"
        >
          {Array.from({ length: 6 }).map((_, i) => (
            <div
              class="h-24 animate-pulse rounded-xl border bg-card/50"
              style={`animation-delay:${i * 40}ms`}
            />
          ))}
        </div>
      </div>

      <!-- Integrity -->
      <div
        id="checksum-wrap"
        class="mt-5 hidden items-center justify-between rounded-xl border bg-card/60 p-3 text-sm"
      >
        <div class="flex items-center gap-2 text-muted-foreground">
          <LuCheck className="text-primary" />
          Verify integrity with checksums.
        </div>
        <div class="flex items-center gap-2">
          <a
            id="checksum-link"
            href="#"
            target="_blank"
            rel="noopener"
            class="inline-flex items-center gap-1 rounded-md border px-2 py-1 transition hover:bg-accent"
            ><LuLink /> Open checksums</a
          >
        </div>
      </div>
    </div>
  </section>

  <!-- Page-specific polish -->
  <style>
    #download .border {
      border-color: color-mix(in oklch, var(--olkch-foreground) 12%, transparent);
    }
    #download .divide-y > * + * {
      border-top: 1px solid color-mix(in oklch, var(--olkch-foreground) 8%, transparent);
    }
  </style>

  <script
    type="module"
    define:vars={{ preloaded: release, listUrl, ownerRepo, canonical, title, description }}
  >
    const $ = (s, r = document) => r.querySelector(s);

    const state = {
      release: preloaded || null,
      assets: [],
      checksumAsset: null,
      recommended: null,
      detected: { os: "linux", arch: "x64" },
      selection: { os: "auto", arch: "auto", pkg: "auto" },
    };

    const detectOS = () => {
      const ua = navigator.userAgent || "";
      const plat = (navigator.platform || "").toLowerCase();
      if (/windows/i.test(ua)) return "windows";
      if (/mac|darwin/i.test(ua) || plat.includes("mac")) return "macos";
      return "linux";
    };
    const detectArch = async () => {
      const nav = navigator;
      try {
        if ("userAgentData" in nav && nav.userAgentData.getHighEntropyValues) {
          const { architecture } = await nav.userAgentData.getHighEntropyValues(
            ["architecture"],
          );
          if (/arm|aarch64/i.test(architecture)) return "arm64";
          if (/x64|amd64|x86_64/i.test(architecture)) return "x64";
        }
      } catch {}
      const ua = (navigator.userAgent || "").toLowerCase();
      if (/arm64|aarch64|apple\ssilicon|silicon/.test(ua)) return "arm64";
      if (/mac/i.test(ua) && navigator.maxTouchPoints > 0) return "arm64";
      return "x64";
    };

    const fetchLatestReleaseAllowingPrerelease = async () => {
      if (state.release) return state.release;
      try {
        const res = await fetch(`${listUrl}?per_page=5`, {
          headers: { Accept: "application/vnd.github+json" },
        });
        if (!res.ok) return null;
        const releases = await res.json();
        const nonDraft = releases.filter((r) => !r.draft);
        state.release =
          nonDraft.find((r) => !r.prerelease) || nonDraft[0] || null;
      } catch {}
      return state.release;
    };

    const toMB = (bytes) => (bytes / 1048576).toFixed(1);
    const niceDate = (d) =>
      new Date(d ?? Date.now()).toLocaleString(undefined, {
        year: "numeric",
        month: "short",
        day: "2-digit",
      });

    const nameOS = (n) => {
      const s = n.toLowerCase();
      if (/\.(dmg|pkg)$/i.test(n) || s.includes("mac") || s.includes("darwin"))
        return "macos";
      if (/\.(msi|exe)$/i.test(n) || s.includes("win")) return "windows";
      if (/\.(appimage|deb|rpm|tar\.gz)$/i.test(n) || s.includes("linux"))
        return "linux";
      return "other";
    };
    const nameArch = (n) => {
      const s = n.toLowerCase();
      if (/(arm64|aarch64|apple|silicon)/.test(s)) return "arm64";
      if (/(x64|x86_64|amd64)/.test(s)) return "x64";
      return "any";
    };
    const namePkg = (n) => {
      const s = n.toLowerCase();
      if (s.endsWith(".dmg")) return "dmg";
      if (s.endsWith(".msi")) return "msi";
      if (s.endsWith(".exe")) return "exe";
      if (s.endsWith(".appimage")) return "appimage";
      if (s.endsWith(".deb")) return "deb";
      if (s.endsWith(".rpm")) return "rpm";
      if (s.endsWith(".tar.gz")) return "tar.gz";
      if (s.endsWith(".zip")) return "zip";
      return "file";
    };

    const buildIndex = () => {
      // Exclude auto-update metadata files (.json) and signature files (.sig)
      const raw = state.release?.assets || [];
      state.assets = raw
        .filter((a) => !/\.json$/i.test(a.name) && !/\.sig$/i.test(a.name))
        .map((a) => ({
          name: a.name,
          url: a.browser_download_url,
          size: a.size,
          os: nameOS(a.name),
          arch: nameArch(a.name),
          pkg: namePkg(a.name),
          uploadedAt: a.updated_at || a.created_at || state.release?.published_at,
        }));
      state.checksumAsset =
        state.assets.find((a) => /checksums?(\.txt)?$/i.test(a.name)) || null;
    };

    const pkgPriorityByOS = {
      macos: ["dmg", "zip"],
      windows: ["msi", "exe", "zip"],
      linux: ["appimage", "deb", "rpm", "tar.gz", "zip"],
      other: ["zip"],
    };

    const pickAsset = (os, arch, pkgPref = "auto") => {
      const candidates = state.assets.filter(
        (a) => a.os === os || (os === "linux" && a.os === "other"),
      );
      const archFirst = candidates.filter(
        (a) => a.arch === arch || a.arch === "any",
      );
      const order =
        pkgPref !== "auto" ? [pkgPref] : pkgPriorityByOS[os] || ["zip"];
      for (const kind of order) {
        const m = archFirst.find((a) => a.pkg === kind);
        if (m) return m;
      }
      return archFirst[0] || candidates[0] || state.assets[0] || null;
    };

    const renderPrimary = (asset) => {
      const btn = $("#download-primary");
      if (!btn) return;
      if (asset) {
        btn.href = asset.url;
        btn.target = "_blank";
        btn.rel = "noopener noreferrer";
        btn.setAttribute("download", "");
        btn.querySelector("span").textContent = `Download ${asset.name}`;
        btn.title = `${asset.name} (${toMB(asset.size)} MB)`;
      } else {
        btn.href = `https://github.com/${ownerRepo}/releases`;
        btn.target = "_blank";
        btn.rel = "noopener noreferrer";
        btn.removeAttribute("download");
        btn.querySelector("span").textContent = "Open Releases";
        btn.title = "Open latest releases";
      }
    };

    const renderDetected = () => {
      $("#detected-os").textContent =
        state.selection.os === "auto" ? state.detected.os : state.selection.os;
      $("#detected-arch").textContent =
        state.selection.arch === "auto"
          ? state.detected.arch
          : state.selection.arch;
    };

    const iconForPkg = (pkg) => {
      switch (pkg) {
        case "dmg":
          return "";
        case "msi":
        case "exe":
          return "⊞";
        case "appimage":
        case "deb":
        case "rpm":
        case "tar.gz":
          return "🐧";
        case "zip":
        default:
          return "⬚";
      }
    };

    const renderAssetsList = () => {
      const wrap = $("#asset-list");
      if (!wrap) return;
      $("#asset-skeleton")?.remove();

      if (!state.assets.length) {
        wrap.innerHTML =
          '<div class="text-sm text-muted-foreground">No assets on the latest release yet.</div>';
        return;
      }

      const groups = ["macos", "windows", "linux", "other"];
      let html = '<div class="grid gap-4">';
      for (const g of groups) {
        const list = state.assets.filter((a) => a.os === g);
        if (!list.length) continue;
        html += `
          <div class="rounded-2xl border bg-card/60 backdrop-blur">
            <div class="flex items-center justify-between gap-2 border-b px-4 py-2.5">
              <div class="text-sm font-semibold tracking-wide">${g.toUpperCase()}</div>
              <div class="text-xs text-muted-foreground">${list.length} file${list.length>1?"s":""}</div>
            </div>
            <div class="divide-y">
              ${list
                .map(
                  (a) => `
                <div class="px-4 py-3 flex flex-col gap-2 md:flex-row md:items-center md:justify-between">
                  <div class="flex min-w-0 items-start gap-3">
                    <div class="mt-[2px] h-6 w-6 shrink-0 select-none rounded-md border text-xs grid place-items-center">${iconForPkg(
                      a.pkg,
                    )}</div>
                    <div class="min-w-0">
                      <div class="font-mono text-sm break-all">${a.name}</div>
                      <div class="text-xs text-muted-foreground">
                        ${a.pkg.toUpperCase()} · ${a.arch.toUpperCase?.() ?? a.arch} · ${toMB(
                          a.size,
                        )} MB · ${niceDate(a.uploadedAt)}
                      </div>
                    </div>
                  </div>
                  <div class="flex items-center gap-2">
                    <a href="${a.url}" target="_blank" rel="noopener noreferrer"
                      class="rounded-lg border px-3 py-1.5 text-sm transition hover:bg-accent">
                      Download
                    </a>
                  </div>
                </div>
              `,
                )
                .join("")}
            </div>
          </div>
        `;
      }
      html += "</div>";
      wrap.innerHTML = html;

      // checksums
      const checks = state.checksumAsset;
      const cwrap = $("#checksum-wrap");
      if (checks && cwrap) {
        $("#checksum-link").href = checks.url;
        cwrap.classList.remove("hidden");
        cwrap.classList.add("flex");
      }
    };

    const updateRecommendation = () => {
      const osSel = document.querySelector("#os-select").value;
      const archSel = document.querySelector("#arch-select").value;
      const pkgSel = document.querySelector("#pkg-select").value;

      state.selection = { os: osSel, arch: archSel, pkg: pkgSel };

      const os = osSel === "auto" ? state.detected.os : osSel;
      const arch = archSel === "auto" ? state.detected.arch : archSel;

      const rec = pickAsset(os, arch, pkgSel);
      state.recommended = rec;
      renderDetected();
      renderPrimary(rec);
    };

    (async () => {
      state.detected.os = detectOS();
      state.detected.arch = await detectArch().catch(() => "x64");
      renderDetected();

      await fetchLatestReleaseAllowingPrerelease();
      if (state.release) {
        const meta = $("#release-meta");
        if (meta) {
          const when = new Date(
            state.release.published_at ??
              state.release.created_at ??
              Date.now(),
          ).toDateString();
          meta.textContent = `Latest: ${
            state.release.tag_name ?? state.release.name ?? "—"
          } · ${when}${state.release.prerelease ? " (pre-release)" : ""}`;
        }
      }

      if (state.release) {
        buildIndex();
      }

      renderAssetsList();
      updateRecommendation();

      document
        .querySelector("#os-select")
        ?.addEventListener("change", updateRecommendation);
      document
        .querySelector("#arch-select")
        ?.addEventListener("change", updateRecommendation);
      document
        .querySelector("#pkg-select")
        ?.addEventListener("change", updateRecommendation);
    })();
  </script>
</BlogLayout>
