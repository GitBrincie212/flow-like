---
import { LuCircleCheck, LuTrendingUp, LuZap } from "react-icons/lu";
---

<section
    id="typed"
    class="relative mx-auto max-w-7xl px-4 py-32 lg:px-8 mt-8 pt-0"
    data-c1="hsl(0 100% 63% / .10)"
    data-c2="hsl(21 89% 67% / .10)"
>
    <div class="relative z-10">
        <div class="mx-auto max-w-4xl text-center">
            <div
                class="inline-flex items-center gap-2 rounded-full border border-primary/20 bg-primary/10 backdrop-blur-sm px-4 py-2 text-sm font-medium text-primary mb-6"
            >
                <div class="w-2 h-2 bg-primary rounded-full animate-pulse">
                </div>
                Prototype → Production
            </div>
            <h2
                class="text-4xl font-bold sm:text-5xl lg:text-6xl bg-gradient-to-r from-foreground via-primary to-secondary bg-clip-text text-transparent"
            >
                Zero-to-prod, <span class="text-primary">by design</span>
            </h2>
            <p class="mt-6 text-lg text-muted-foreground max-w-3xl mx-auto">
                The graph you sketch is the graph you deploy. Typed ports,
                preflight validation, and a deterministic Rust runtime mean no
                throwaway prototypes, no glue-code rewrite, and no surprises
                when you flip from dev to prod.
            </p>
        </div>

        <div class="mt-16 grid gap-8 md:grid-cols-2 lg:grid-cols-3">
            <!-- 1 -->
            <div
                class="group relative overflow-hidden rounded-2xl border border-border/40 bg-card/40 backdrop-blur-sm p-8 hover:bg-card/60 transition-all duration-300"
            >
                <div
                    class="absolute inset-0 bg-gradient-to-br from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                >
                </div>
                <div class="relative z-10">
                    <div
                        class="w-12 h-12 bg-gradient-to-br from-primary to-primary/60 rounded-xl flex items-center justify-center mb-4"
                    >
                        <LuCircleCheck
                            className="w-6 h-6 text-primary-foreground"
                        />
                    </div>
                    <h3 class="text-xl font-semibold mb-3">
                        Production-ready by default
                    </h3>
                    <p class="text-muted-foreground leading-relaxed">
                        Preflight checks catch schema and wiring issues before
                        run. The same typed graph ships across dev → staging →
                        prod — no “hardening” rewrite.
                    </p>
                </div>
            </div>

            <!-- 2 -->
            <div
                class="group relative overflow-hidden rounded-2xl border border-border/40 bg-card/40 backdrop-blur-sm p-8 hover:bg-card/60 transition-all duration-300"
            >
                <div
                    class="absolute inset-0 bg-gradient-to-br from-secondary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                >
                </div>
                <div class="relative z-10">
                    <div
                        class="w-12 h-12 bg-gradient-to-br from-secondary to-secondary/60 rounded-xl flex items-center justify-center mb-4"
                    >
                        <LuZap className="w-6 h-6 text-secondary-foreground" />
                    </div>
                    <h3 class="text-xl font-semibold mb-3">
                        Contracts that don’t drift
                    </h3>
                    <p class="text-muted-foreground leading-relaxed">
                        Typed dataflow with versioned port schemas makes
                        refactors safe and reviewable. Changes are validated, so
                        prototypes stay deployable as they evolve.
                    </p>
                </div>
            </div>

            <!-- 3 -->
            <div
                class="group relative overflow-hidden rounded-2xl border border-border/40 bg-card/40 backdrop-blur-sm p-8 hover:bg-card/60 transition-all duration-300 md:col-span-2 lg:col-span-1"
            >
                <div
                    class="absolute inset-0 bg-gradient-to-br from-tertiary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                >
                </div>
                <div class="relative z-10">
                    <div
                        class="w-12 h-12 bg-gradient-to-br from-tertiary to-tertiary/60 rounded-xl flex items-center justify-center mb-4"
                    >
                        <LuTrendingUp
                            className="w-6 h-6 text-tertiary-foreground"
                        />
                    </div>
                    <h3 class="text-xl font-semibold mb-3">
                        Predictable in production
                    </h3>
                    <p class="text-muted-foreground leading-relaxed">
                        Rust runtime compiles micro-plans, applies
                        back-pressure, and keeps latency stable under load. Add
                        approvals and policies without changing the graph.
                    </p>
                </div>
            </div>
        </div>
    </div>
</section>
