//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use super::sea_orm_active_enums::PublicationRequestStatus;
use super::sea_orm_active_enums::Visibility;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "PublicationRequest")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_name = "approverId", column_type = "Text", nullable)]
    pub approver_id: Option<String>,
    pub status: PublicationRequestStatus,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTime,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTime,
    #[sea_orm(column_name = "appId", column_type = "Text")]
    pub app_id: String,
    #[sea_orm(column_name = "targetVisibility")]
    pub target_visibility: Visibility,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::app::Entity",
        from = "Column::AppId",
        to = "super::app::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    App,
    #[sea_orm(has_many = "super::publication_log::Entity")]
    PublicationLog,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::ApproverId",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    User,
}

impl Related<super::app::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::App.def()
    }
}

impl Related<super::publication_log::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PublicationLog.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
