//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use super::sea_orm_active_enums::UserStatus;
use super::sea_orm_active_enums::UserTier;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "User")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub email: Option<String>,
    #[sea_orm(column_type = "Text", nullable, unique)]
    pub username: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(
        column_name = "additionalInformation",
        column_type = "JsonBinary",
        nullable
    )]
    pub additional_information: Option<Json>,
    pub permission: i64,
    #[sea_orm(column_name = "acceptedTermsVersion", column_type = "Text", nullable)]
    pub accepted_terms_version: Option<String>,
    #[sea_orm(column_name = "tutorialCompleted")]
    pub tutorial_completed: bool,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTime,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTime,
    #[sea_orm(column_name = "stripeId", column_type = "Text", nullable, unique)]
    pub stripe_id: Option<String>,
    pub status: UserStatus,
    pub tier: UserTier,
    #[sea_orm(column_name = "totalSize")]
    pub total_size: i64,
    #[sea_orm(
        column_name = "preferredUsername",
        column_type = "Text",
        nullable,
        unique
    )]
    pub preferred_username: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub avatar: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::comment::Entity")]
    Comment,
    #[sea_orm(has_many = "super::execution_usage_tracking::Entity")]
    ExecutionUsageTracking,
    #[sea_orm(has_many = "super::feedback::Entity")]
    Feedback,
    #[sea_orm(has_many = "super::invitation::Entity")]
    Invitation,
    #[sea_orm(has_many = "super::join_queue::Entity")]
    JoinQueue,
    #[sea_orm(has_many = "super::llm_usage_tracking::Entity")]
    LlmUsageTracking,
    #[sea_orm(has_many = "super::membership::Entity")]
    Membership,
    #[sea_orm(has_many = "super::pat::Entity")]
    Pat,
    #[sea_orm(has_many = "super::profile::Entity")]
    Profile,
    #[sea_orm(has_many = "super::publication_log::Entity")]
    PublicationLog,
    #[sea_orm(has_many = "super::publication_request::Entity")]
    PublicationRequest,
    #[sea_orm(has_many = "super::transaction::Entity")]
    Transaction,
}

impl Related<super::comment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Comment.def()
    }
}

impl Related<super::execution_usage_tracking::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ExecutionUsageTracking.def()
    }
}

impl Related<super::feedback::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Feedback.def()
    }
}

impl Related<super::invitation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Invitation.def()
    }
}

impl Related<super::join_queue::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::JoinQueue.def()
    }
}

impl Related<super::llm_usage_tracking::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LlmUsageTracking.def()
    }
}

impl Related<super::membership::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Membership.def()
    }
}

impl Related<super::pat::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Pat.def()
    }
}

impl Related<super::profile::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Profile.def()
    }
}

impl Related<super::publication_log::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PublicationLog.def()
    }
}

impl Related<super::publication_request::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PublicationRequest.def()
    }
}

impl Related<super::transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transaction.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
