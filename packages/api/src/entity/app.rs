//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use super::sea_orm_active_enums::Category;
use super::sea_orm_active_enums::ExecutionMode;
use super::sea_orm_active_enums::Status;
use super::sea_orm_active_enums::Visibility;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "App")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    pub status: Status,
    pub visibility: Visibility,
    #[sea_orm(column_type = "Text", nullable)]
    pub changelog: Option<String>,
    #[sea_orm(column_name = "defaultRoleId", column_type = "Text", nullable, unique)]
    pub default_role_id: Option<String>,
    #[sea_orm(column_name = "ownerRoleId", column_type = "Text", nullable, unique)]
    pub owner_role_id: Option<String>,
    #[sea_orm(column_name = "ratingSum")]
    pub rating_sum: i64,
    #[sea_orm(column_name = "ratingCount")]
    pub rating_count: i64,
    #[sea_orm(column_name = "totalSize")]
    pub total_size: i64,
    pub price: i32,
    #[sea_orm(column_type = "Text", nullable)]
    pub version: Option<String>,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTime,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTime,
    #[sea_orm(column_name = "avgRating", column_type = "Double", nullable)]
    pub avg_rating: Option<f64>,
    #[sea_orm(column_name = "relevanceScore", column_type = "Double", nullable)]
    pub relevance_score: Option<f64>,
    #[sea_orm(column_name = "downloadCount")]
    pub download_count: i64,
    #[sea_orm(column_name = "interactionsCount")]
    pub interactions_count: i64,
    #[sea_orm(column_name = "primaryCategory")]
    pub primary_category: Option<Category>,
    #[sea_orm(column_name = "secondaryCategory")]
    pub secondary_category: Option<Category>,
    #[sea_orm(column_name = "executionMode")]
    pub execution_mode: ExecutionMode,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::comment::Entity")]
    Comment,
    #[sea_orm(has_many = "super::course_connection::Entity")]
    CourseConnection,
    #[sea_orm(has_many = "super::execution_usage_tracking::Entity")]
    ExecutionUsageTracking,
    #[sea_orm(has_many = "super::feedback::Entity")]
    Feedback,
    #[sea_orm(has_many = "super::invitation::Entity")]
    Invitation,
    #[sea_orm(has_many = "super::invite_link::Entity")]
    InviteLink,
    #[sea_orm(has_many = "super::join_queue::Entity")]
    JoinQueue,
    #[sea_orm(has_many = "super::llm_usage_tracking::Entity")]
    LlmUsageTracking,
    #[sea_orm(has_many = "super::membership::Entity")]
    Membership,
    #[sea_orm(has_many = "super::meta::Entity")]
    Meta,
    #[sea_orm(has_many = "super::publication_request::Entity")]
    PublicationRequest,
    #[sea_orm(
        belongs_to = "super::role::Entity",
        from = "Column::DefaultRoleId",
        to = "super::role::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Role2,
    #[sea_orm(
        belongs_to = "super::role::Entity",
        from = "Column::OwnerRoleId",
        to = "super::role::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Role1,
    #[sea_orm(has_many = "super::technical_user::Entity")]
    TechnicalUser,
    #[sea_orm(has_many = "super::template::Entity")]
    Template,
}

impl Related<super::comment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Comment.def()
    }
}

impl Related<super::course_connection::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CourseConnection.def()
    }
}

impl Related<super::execution_usage_tracking::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ExecutionUsageTracking.def()
    }
}

impl Related<super::feedback::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Feedback.def()
    }
}

impl Related<super::invitation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Invitation.def()
    }
}

impl Related<super::invite_link::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::InviteLink.def()
    }
}

impl Related<super::join_queue::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::JoinQueue.def()
    }
}

impl Related<super::llm_usage_tracking::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LlmUsageTracking.def()
    }
}

impl Related<super::membership::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Membership.def()
    }
}

impl Related<super::meta::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Meta.def()
    }
}

impl Related<super::publication_request::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PublicationRequest.def()
    }
}

impl Related<super::technical_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TechnicalUser.def()
    }
}

impl Related<super::template::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Template.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
