//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "Meta")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_type = "Text")]
    pub lang: String,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(column_name = "longDescription", column_type = "Text", nullable)]
    pub long_description: Option<String>,
    pub tags: Option<Vec<String>>,
    #[sea_orm(column_name = "bitId", column_type = "Text", nullable)]
    pub bit_id: Option<String>,
    #[sea_orm(column_name = "courseId", column_type = "Text", nullable)]
    pub course_id: Option<String>,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTime,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTime,
    #[sea_orm(column_name = "appId", column_type = "Text", nullable)]
    pub app_id: Option<String>,
    #[sea_orm(column_name = "templateId", column_type = "Text", nullable)]
    pub template_id: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub icon: Option<String>,
    #[sea_orm(column_name = "previewMedia")]
    pub preview_media: Option<Vec<String>>,
    #[sea_orm(column_type = "Text", nullable)]
    pub thumbnail: Option<String>,
    #[sea_orm(column_name = "ageRating")]
    pub age_rating: Option<i64>,
    #[sea_orm(column_name = "docsUrl", column_type = "Text", nullable)]
    pub docs_url: Option<String>,
    #[sea_orm(
        column_name = "organizationSpecificValues",
        column_type = "JsonBinary",
        nullable
    )]
    pub organization_specific_values: Option<Json>,
    #[sea_orm(column_name = "releaseNotes", column_type = "Text", nullable)]
    pub release_notes: Option<String>,
    #[sea_orm(column_name = "supportUrl", column_type = "Text", nullable)]
    pub support_url: Option<String>,
    #[sea_orm(column_name = "useCase", column_type = "Text", nullable)]
    pub use_case: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub website: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::app::Entity",
        from = "Column::AppId",
        to = "super::app::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    App,
    #[sea_orm(
        belongs_to = "super::bit::Entity",
        from = "Column::BitId",
        to = "super::bit::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Bit,
    #[sea_orm(
        belongs_to = "super::course::Entity",
        from = "Column::CourseId",
        to = "super::course::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Course,
    #[sea_orm(
        belongs_to = "super::template::Entity",
        from = "Column::TemplateId",
        to = "super::template::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Template,
}

impl Related<super::app::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::App.def()
    }
}

impl Related<super::bit::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bit.def()
    }
}

impl Related<super::course::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Course.def()
    }
}

impl Related<super::template::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Template.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
