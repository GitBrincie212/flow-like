//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "BitTreeCache")]
pub struct Model {
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTime,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTime,
    #[sea_orm(
        column_name = "dependencyTreeHash",
        primary_key,
        auto_increment = false,
        column_type = "Text"
    )]
    pub dependency_tree_hash: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::bit::Entity",
        from = "Column::DependencyTreeHash",
        to = "super::bit::Column::DependencyTreeHash",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Bit,
    #[sea_orm(has_many = "super::bit_cache::Entity")]
    BitCache,
}

impl Related<super::bit::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bit.def()
    }
}

impl Related<super::bit_cache::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BitCache.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
