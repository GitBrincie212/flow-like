generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LandingPage {
  id String @id

  title String
  description String
  image String
  link String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SwimlaneType {
  PROJECT
  ARTICLE
  CHAT
  COURSE
  QUERY
}

enum SwimlaneSize {
  FULLSCREEN
  HALFSCREEN
  THIRDSCREEN
  THIRDSCREEN_MULTIROW
}

model Swimlane {
  id String @id

  title String?
  description String?

  type SwimlaneType
  size SwimlaneSize

  items SwimlaneItem[]

  // these are used to find items for the swimlane that are not fixed
  tags String[]
  index Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SwimlaneItem {
  id String @id

  swimlane Swimlane @relation(fields: [swimlaneId], references: [id], onDelete: Cascade)
  swimlaneId String

  order Int

  // This could be a link to a different page / article / ... depending on the Type of Swimlane
  content Json?

  bit Bit? @relation(fields: [bitId], references: [id], onDelete: Cascade)
  bitId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Template {
  id String @id

  meta Meta[]

  comments Comment[]
  changelog String?

  feedback Feedback[]

  ratingSum   Int   @default(0)
  ratingCount Int   @default(0)

  app App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  version String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Node {
  id String @id

  name String
  description String?
  category String
  icon String?

  bitId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum UserTier {
  FREE
  PREMIUM
  PRO
  ENTERPRISE
}

model User {
  id          String  @id

  stripeId    String?

  email       String?
  username    String?
  name        String?
  description String?
  avatarUrl   String?

  additionalInformation Json?

  permission BigInt @default(0)
  acceptedTermsVersion String?
  tutorialCompleted Boolean @default(false)

  memberships Membership[]
  profiles Profile[]
  personalAccessToken PAT[]
  queue       JoinQueue[]
  comments    Comment[]
  logs       ProviderInvocation[]
  feedback    Feedback[]
  assignedPublicationRequests PublicationRequest[]
  publicationLogs PublicationLog[]
  invitations Invitations[]
  transactions Transaction[]

  status UserStatus @default(ACTIVE)
  tier UserTier @default(FREE)

  totalSize BigInt @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id String @id

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  stripeId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Profile {
  id String @id

  name String
  thumbnail String?
  icon String?
  description String?
  interests String[]
  tags String[]

  theme Json?
  settings Json?

  // JSON with the apps that are part of the profile. Contains the app ID, if it is favorite, pinned and position of the two
  apps Json[]
  bitIds String[]
  hub String
  hubs String[]

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TemplateProfile {
  id String @id

  name String
  thumbnail String?
  icon String?
  description String?
  interests String[]
  tags String[]

  theme Json?
  settings Json?

  // JSON with the apps that are part of the profile. Contains the app ID, if it is favorite, pinned and position of the two
  apps Json[]
  bitIds String[]
  hub String
  hubs String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invitations {
  id String @id

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  app   App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PAT {
  id String @id

  name String
  key String @unique
  permissions BigInt @default(0)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  validUntil DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum CATEGORY {
  OTHER
  PRODUCTIVITY
  SOCIAL
  ENTERTAINMENT
  EDUCATION
  HEALTH
  FINANCE
  LIFESTYLE
  TRAVEL
  NEWS
  SPORTS
  SHOPPING
  FOOD_AND_DRINK
  MUSIC
  PHOTOGRAPHY
  UTILITIES
  WEATHER
  GAMES
  BUSINESS
  COMMUNICATION
  ANIME
}

enum Status {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum Visibility {
  PUBLIC
  PUBLIC_REQUEST_ACCESS
  PRIVATE
  PROTOTYPE
  OFFLINE
}

model JoinQueue {
  id String @id

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  app   App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  comment String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, appId])
}

model InviteLink {
  id String @id

  token String @unique
  app   App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  countJoined Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model App {
  id String @id

  status     Status @default(ACTIVE)
  visibility Visibility @default(PRIVATE)

  meta Meta[]

  templates Template[]
  queue JoinQueue[]
  members Membership[]
  comments Comment[]
  changelog String?

  courses CourseConnection[]
  inviteLinks InviteLink[]
  invitations Invitations[]

  feedback Feedback[]
  publicationRequests PublicationRequest[]

  defaultRole Role? @relation("defaultForApp", fields: [defaultRoleId], references: [id])
  defaultRoleId String? @unique
  ownerRole Role? @relation("ownerForApp", fields: [ownerRoleId], references: [id])
  ownerRoleId String? @unique
  roles Role[]
  files File[]

  primaryCategory CATEGORY?
  secondaryCategory CATEGORY?

  ratingSum   BigInt   @default(0)
  ratingCount BigInt   @default(0)
  downloadCount BigInt @default(0)
  interactionsCount BigInt @default(0)

  avgRating Float? @default(0)
  // Relevance formula: (downloads * 2 + interactions) * (1 + avgRating/5) * log(ratingCount + 1)
  relevanceScore Float? @default(0)

  totalSize BigInt @default(0)

  price Int @default(0)
  version String?

  technicalUsers TechnicalUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
  @@index([updatedAt])
  @@index([avgRating])
  @@index([relevanceScore])
  @@index([ratingSum])
  @@index([status])
}

model File {
  path String @id
  eTag String

  size BigInt

  app App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TechnicalUser {
  id String @id

  name String
  description String?
  key String @unique

  role Role? @relation(fields: [roleId], references: [id], onDelete: SetNull)
  roleId String?

  app   App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  validUntil DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([appId])
}

model Feedback {
  id String @id

  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  app   App? @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String?

  template Template? @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String?

  context Json?
  text String
  rating Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([appId])
  @@index([createdAt])
  @@index([userId])
}

model CourseConnection {
  id String @id

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  app App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([appId])
}

model Course {
  id String @id

  language String
  meta Meta[]

  connections CourseConnection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([language])
}

model Comment {
  id String @id

  text String
  rating Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  app   App? @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String?

  template Template? @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, appId])
  @@index([appId])
  @@index([userId])
}

model Membership {
  id String @id

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  app   App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  joinedVia String?

  @@unique([userId, appId])
  @@index([appId, roleId])
}

model Role {
  id String @id

  name        String
  description String?

  attributes  String[]
  permissions BigInt

  memberships Membership[]
  technicalUsers TechnicalUser[]

  app App? @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String?

  defaultForApp App? @relation("defaultForApp")
  ownerForApp App? @relation("ownerForApp")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BitType {
  COURSE
  LLM
  VLM
  EMBEDDING
  IMAGE_EMBEDDING
  OBJECT_DETECTION
  FILE
  MEDIA
  TEMPLATE
  TOKENIZER
  TOKENIZER_CONFIG
  SPECIAL_TOKENS_MAP
  CONFIG
  PREPROCESSOR_CONFIG
  PROJECTION
  PROJECT
  BOARD
  OTHER
}

model Bit {
  id String @id

  authors String[]
  type BitType
  meta Meta[]
  repository String?
  downloadLink String?
  fileName String?
  hash String
  parameters Json?

  size BigInt?
  hub String

  version String?
  license String?

  dependencies String[]
  dependencyTreeHash String @unique

  providerProxy ProviderProxy?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  featuredSwimlane SwimlaneItem[]

  cache BitTreeCache?
  caches BitCache[]

  @@index([type])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([hash])
  @@index([hub])
}

model BitCache {
  id String @id

  bit Bit? @relation(fields: [bitId], references: [id], onDelete: Cascade)
  bitId String?

  externalBit Json?

  bitTreeCache BitTreeCache @relation(fields: [dependencyTreeHash], references: [dependencyTreeHash], onDelete: Cascade)
  dependencyTreeHash String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([dependencyTreeHash])
}

model BitTreeCache {
  dependencyTreeHash String @id
  bit Bit @relation(fields: [dependencyTreeHash], references: [dependencyTreeHash], onDelete: Cascade)

  bits BitCache[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Meta {
  id String @id

  lang String

  name String
  description String?
  longDescription String?
  releaseNotes String?
  tags String[]

  useCase String?

  icon String?
  thumbnail String?
  previewMedia String[]

  ageRating Int?

  website String?
  supportUrl String?
  docsUrl String?
  organizationSpecificValues Json?

  app  App? @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String?

  bit Bit? @relation(fields: [bitId], references: [id], onDelete: Cascade)
  bitId String?

  course Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String?

  template Template? @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([appId])
  @@index([appId, lang])
  @@index([bitId, lang])
  @@index([courseId, lang])
  @@index([templateId, lang])
  @@index([lang])
  @@index([tags])
}

enum LLMProvider {
  HuggingFace
  OpenAI
  Anthropic
  AzureOpenAI
  Google
  IBM
  X
  Bedrock
  Deepseek
}

model ProviderProxy {
  id String @id

  provider LLMProvider
  modelId String @unique
  version String?
  endpoint String?
  token String?

  logs ProviderInvocation[]

  bit Bit @relation(fields: [bitId], references: [id], onDelete: Cascade)
  bitId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProviderInvocation {
  id String @id

  proxy ProviderProxy @relation(fields: [proxyId], references: [id], onDelete: Cascade)
  proxyId String

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  inputToken String
  outputToken String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PublicationRequestStatus {
  PENDING
  ON_HOLD
  ACCEPTED
  REJECTED
}

model PublicationRequest {
  id String @id

  targetVisibility Visibility

  approver User? @relation(fields: [approverId], references: [id], onDelete: SetNull)
  approverId String?

  app App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  status PublicationRequestStatus

  logs PublicationLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([appId])
  @@index([approverId])
}

model PublicationLog {
  id String @id

  request PublicationRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId String

  author User? @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String?

  message String?
  visibility Visibility?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([requestId])
}


